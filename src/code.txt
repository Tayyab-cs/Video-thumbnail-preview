import React, { useState, useRef, useEffect } from "react";
import ReactPlayer from "react-player";
import "./App.css";

function App() {
  const [played, setPlayed] = useState(0);
  const [hoveredTime, setHoveredTime] = useState(null);
  const playerRef = useRef(null);
  const hoverPlayerRef = useRef(null);
  const canvasRef = useRef(null);

  const handleProgress = (progress) => {
    setPlayed(progress.played);
  };

  const handleSeekChange = (e) => {
    const newTime = e.target.value * playerRef.current.getDuration();
    playerRef.current.seekTo(newTime);
  };

  const handleMouseMove = (e) => {
    const barRect = e.target.getBoundingClientRect();
    const hoverTime = (e.clientX - barRect.left) / barRect.width;
    setHoveredTime(hoverTime * playerRef.current.getDuration());
  };

  useEffect(() => {
    // Function to capture the frame at the specified time
    const captureFrame = () => {
      const video = playerRef.current.getInternalPlayer();
      console.log("videooo: ", video);
      const currentTime = video.currentTime;

      // Set the canvas dimensions to match the video
      canvasRef.current.width = video.videoWidth;
      canvasRef.current.height = video.videoHeight;

      // Draw the current video frame onto the canvas
      const context = canvasRef.current.getContext("2d");
      context.drawImage(video, 0, 0, video.videoWidth, video.videoHeight);

      // Get the data URL of the canvas
      const frameDataURL = canvasRef.current.toDataURL();
      console.log("frame: ", frameDataURL);

      // Update the source of the hoverPlayerRef with the captured frame
      hoverPlayerRef.current.wrapper.querySelector("video").src = frameDataURL;
    };

    if (hoveredTime !== null) {
      // Seek to the hovered time to capture the frame
      playerRef.current.seekTo(hoveredTime);
    }

    // Listen for the seeked event to capture the frame
    playerRef.current.wrapper.addEventListener("seeked", captureFrame);

    return () => {
      // Remove the event listener when component unmounts
      playerRef.current.wrapper.removeEventListener("seeked", captureFrame);
    };
  }, [hoveredTime]);

  return (
    <div className="App">
      <h1>Custom Video Player</h1>
      <ReactPlayer
        ref={playerRef}
        url={
          "https://live-par-2-cdn-alt.livepush.io/live/bigbuckbunnyclip/index.m3u8"
        }
        controls
        onProgress={handleProgress}
      />
      <div className="seekbar-container" onMouseMove={handleMouseMove}>
        <input
          type="range"
          min={0}
          max={1}
          step="any"
          value={played}
          onChange={handleSeekChange}
        />
        {hoveredTime !== null && (
          <div className="thumbnail-preview">
            <ReactPlayer
              ref={hoverPlayerRef}
              width={100}
              height={70}
              url={""} // Leave this empty, will be updated dynamically
              playing={false}
            />
            <canvas
              width={100}
              height={70}
              ref={canvasRef}
              style={{ display: "none" }}
            />
          </div>
        )}
      </div>
    </div>
  );
}

export default App;
